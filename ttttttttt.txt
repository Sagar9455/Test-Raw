5.502550 1  716             Tx   d 8 03 22 F1 C1 00 00 00 00
 5.542415 1  71E             Rx   d 8 03 7F 22 78 AA AA AA AA
 7.573091 1  716             Tx   d 8 03 22 F1 95 00 00 00 00
 8.042296 1  71E             Rx   d 8 03 7F 22 78 AA AA AA AA
 8.552341 1  71E             Rx   d 8 10 23 62 F1 C1 A6 32 F7
 8.558035 1  716             Tx   d 8 30 08 0A 00 00 00 00 00
 8.562347 1  71E             Rx   d 8 21 CD 4D F6 CD A6 04 EB
 8.577522 1  71E             Rx   d 8 22 7E 3A 2E 85 0A 39 2D
 8.592413 1  71E             Rx   d 8 23 6D F1 C0 AA 2C 5A F0
 8.607369 1  71E             Rx   d 8 24 13 B5 45 F5 BC C9 D6
 8.622673 1  71E             Rx   d 8 25 FD AA AA AA AA AA AA





def wait_for_final_response(client, tc_id, step_desc, timeout_total=5.0):
    start_time = time.time()
    pending_detected = False

    while time.time() - start_time < timeout_total:
        response = client.conn.wait_frame(timeout=1)
        if response is None:
            continue  # Still waiting

        raw_payload = list(response)
        if len(raw_payload) >= 3 and raw_payload[0] == 0x7F and raw_payload[2] == 0x78:
            logging.info(f"{tc_id} {step_desc} -> 0x78 Response Pending, waiting...")
            pending_detected = True
            continue  # Wait again
        else:
            # Check if it's a multi-frame (First Frame)
            if len(raw_payload) >= 2 and (raw_payload[0] & 0xF0) == 0x10:
                # It's a multi-frame â€” continue assembling
                full_response = bytearray(response)
                client.conn.send(bytes([0x30, 0x08, 0x0A]))  # FC: Continue to send
                while True:
                    next_frame = client.conn.wait_frame(timeout=1)
                    if next_frame is None:
                        break
                    full_response += next_frame
                    if len(full_response) >= (raw_payload[1] + 2):  # Total length + SID + LEN
                        break
                return full_response
            return response
    logging.warning(f"{tc_id} {step_desc} -> Timeout after waiting for response.")
    return None

