# === Response Verification ===
                    if response is not None:
                        try:
                            raw_payload = list(response)
                            logging.debug(f"{tc_id} {step_desc} -> Received payload: {raw_payload}")

                            status, failure_reason = verify_response(raw_payload, expected_bytes, tc_id, step_desc)

                            if status == "Pass":
                                logging.info(f"{tc_id} {step_desc} -> PASS")
                            else:
                                logging.warning(f"{tc_id} {step_desc} -> FAIL - {failure_reason}")

                        except Exception as e:
                            status = "Fail"
                            failure_reason = f"Could not extract payload: {str(e)}"
                            logging.error(f"{tc_id} {step_desc} -> FAIL - {failure_reason}")
                    else:
                        status = "Fail"
                        failure_reason = "No response received (timeout)"
                        logging.error(f"{tc_id} {step_desc} -> FAIL - {failure_reason}")

            except Exception as e:
                status = "Fail"
                failure_reason = str(e)
                logging.error(f"{tc_id} {step_desc} -> EXCEPTION - {failure_reason}")

            delay_key = service.upper()
            delay = float(self.step_delays.get(delay_key, self.default_delay))
            oled.display_centered_text(f"{tc_id}\n{step_desc[:20]}\n{status}")
            time.sleep(delay)

    self.stop_logging()
