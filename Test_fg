def run_testcase(self, oled):
    def wait_for_final_response(client, tc_id, step_desc, max_wait=3):
        response = client.conn.wait_frame(timeout=2)
        start_time = time.time()
        while response and response[0] == 0x7F and response[2] == 0x78:
            logging.info(f"{tc_id} {step_desc} -> 0x78 Response Pending, waiting for final response...")
            response = client.conn.wait_frame(timeout=2)
            if time.time() - start_time > max_wait:
                logging.warning(f"{tc_id} {step_desc} -> Timed out waiting after 0x78")
                break
        return response

    if not self.check_memory(oled):
        return

    ecu_info_data = self.get_ecu_information(oled=None, logging_enable=False)
    testcase_file_path = self.get_testcase_file_path()
    self.start_logging(log_name_suffix="Testcase")
    grouped_cases = load_testcases(testcase_file_path)
    self.context = {}

    immediate_mode = self.config["uds"].get("immediate_mode", False)

    for tc_id, steps in grouped_cases.items():
        print("\n")
        logging.info(f"Running Test Case: {tc_id}")

        for step in steps:
            tc_id, step_desc, service, subfunc, expected, write_data, addressing = step
            status = "Fail"
            failure_reason = ""

            try:
                self.switch_mode(addressing)
                with Client(self.active_conn["conn"], request_timeout=2, config=self.active_conn["client_config"]) as client:
                    logging.info(f"Switched to {addressing} mode for TC: {tc_id} Step: {step_desc}")

                    service_int = int(service, 16)
                    expected_bytes = [int(b, 16) for b in expected.strip().split()]
                    data_to_write = [int(b, 16) for b in write_data.strip().split()] if write_data else []
                    response = None

                    if service_int == 0x10:
                        if subfunc != "":
                            subfunc_int = int(subfunc, 16)
                            raw_request = bytes([0x10, subfunc_int])
                        else:
                            subfunc_clean = subfunc.strip()
                            subfunc_bytes = bytes.fromhex(subfunc_clean) if subfunc_clean else b''
                            raw_request = bytearray([service_int]) + subfunc_bytes

                        logging.info(f"{tc_id} - {step_desc}: Sending {raw_request.hex().upper()}")
                        time.sleep(0.05)
                        client.conn.send(raw_request)
                        response = wait_for_final_response(client, tc_id, step_desc)

                    else:
                        logging.warning(f"{tc_id} - Unsupported service: {service}")
                        continue

                    # === Response Verification ===
                    if response is not None:
                        try:
                            raw_payload = list(response)
                            logging.debug(f"{tc_id} {step_desc} -> Received payload: {raw_payload}")

                            status, failure_reason = self.verify_response(raw_payload, expected_bytes, tc_id, step_desc)

                            if status == "Pass":
                                logging.info(f"{tc_id} {step_desc} -> PASS")
                            else:
                                logging.warning(f"{tc_id} {step_desc} -> FAIL - {failure_reason}")

                        except Exception as e:
                            status = "Fail"
                            failure_reason = f"Could not extract payload: {str(e)}"
                            logging.error(f"{tc_id} {step_desc} -> FAIL - {failure_reason}")
                    else:
                        status = "Fail"
                        failure_reason = "No response received (timeout)"
                        logging.error(f"{tc_id} {step_desc} -> FAIL - {failure_reason}")

            except Exception as e:
                status = "Fail"
                failure_reason = str(e)
                logging.error(f"{tc_id} {step_desc} -> EXCEPTION - {failure_reason}")

            # === OLED Display + Delay ===
            try:
                if not immediate_mode:
                    delay_key = service.upper()
                    delay = float(self.step_delays.get(delay_key, self.default_delay))
                    oled.display_centered_text(f"{tc_id}\n{step_desc[:20]}\n{status}")
                    time.sleep(delay)
            except Exception as e:
                logging.error(f"OLED/Delay Error: {str(e)}")

    self.stop_logging()
    time.sleep(1.5)

    full_log_path = self.can_logger.get_log_path() or "N/A"
    can_log_file = os.path.basename(full_log_path)

    if not os.path.isfile(full_log_path):
        logging.error(f"File not found after logging stopped: {full_log_path}")
        oled.display_centered_text("Log Error!\nFile Missing.")
        return
    else:
        oled.display_centered_text("Log Generated!\n")
        time.sleep(2)

    report_dir = os.path.join(self.project_root, 'output', 'html_reports')
    os.makedirs(report_dir, exist_ok=True)
    report_filename = f"UDS_Report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.html"
    report_path = os.path.join(report_dir, report_filename)

    for _ in range(6):
        if os.path.exists(full_log_path):
            print(f"Log file found: {full_log_path}")
            break
        else:
            print(f" Waiting for log file to appear: {full_log_path}")
            time.sleep(0.5)
    else:
        print(f"File not found: {can_log_file}")

    generate_report(
        asc_file_path=full_log_path,
        txt_file_path=testcase_file_path,
        output_html_file=report_path,
        allowed_tx_ids=self.allowed_tx_ids,
        allowed_rx_ids=self.allowed_rx_ids,
        ecu_info_data=ecu_info_data,
        target_ecu=self.target_ecu
    )

    oled.display_centered_text("Report Generated")
    time.sleep(2)
