elif service_int == 0x28:  # CommunicationControl using raw request
    subfunc_clean = subfunc.strip()
    expected_clean = expected.strip() if expected else ""

    if subfunc_clean:
        try:
            control_type = int(subfunc_clean, 16)

            # Communication type — for standard 0x28, we assume same as control_type (can be changed)
            if control_type in (0x00, 0x01, 0x02, 0x03):
                communication_type = control_type
            else:
                logging.warning(f"{tc_id} - Unknown CommControl subfunc: {hex(control_type)}. Using 0x00")
                communication_type = 0x00

            # Raw request: 28 <subfunc> <comm_type>
            raw_request = bytes([0x28, control_type, communication_type])
            logging.info(f"{tc_id} - {step_desc}: Sending raw request {raw_request.hex().upper()}")
            client.conn.send(raw_request)
            response = client.conn.wait_frame(timeout=2)

        except ValueError as e:
            logging.error(f"{tc_id} - Invalid subfunction format for 0x28: '{subfunc}' → {e}")
            response = None
        except Exception as e:
            logging.error(f"{tc_id} - Error sending raw 0x28 request: {e}")
            response = None

    else:
        # Handle edge case / negative testing when subfunc is empty, use raw fallback from expected
        try:
            subfunc_bytes = bytes.fromhex(subfunc_clean) if subfunc_clean else b''
            expected_bytes = bytes.fromhex(expected_clean) if expected_clean else b''

            raw_request = bytearray([service_int]) + subfunc_bytes + expected_bytes
            logging.info(f"{tc_id} - {step_desc}: Sending fallback raw request {raw_request.hex().upper()}")
            client.conn.send(raw_request)
            response = client.conn.wait_frame(timeout=2)

        except ValueError as e:
            logging.error(f"{tc_id} - Invalid hex in subfunc/expected for raw 0x28: {e}")
            response = None
        except Exception as e:
            logging.error(f"{tc_id} - Error in fallback raw send for 0x28: {e}")
            response = None
