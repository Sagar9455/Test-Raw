2025-06-24 13:49:58,143 [DEBUG] Received response from server
2025-06-24 13:49:58,143 [INFO] Received positive response for service DiagnosticSessionControl (0x10) from server.
2025-06-24 13:49:58,344 [INFO] [ECU Info] Processing ECU_INFO_1
2025-06-24 13:49:58,345 [DEBUG] [ECU Info] Step=('ECU_INFO_1', 'S/W Version', '0x22', '0xF1DD', '0x62', '', 'physical')
2025-06-24 13:49:58,447 [INFO] [ECU Info] Processing ECU_INFO_2
2025-06-24 13:49:58,450 [DEBUG] [ECU Info] Step=('ECU_INFO_2', 'B-CAN Version', '0x22', '0xF100', '0x62', '', 'physical')
2025-06-24 13:49:58,553 [INFO] [ECU Info] Processing ECU_INFO_3
2025-06-24 13:49:58,554 [DEBUG] [ECU Info] Step=('ECU_INFO_3', 'Manufacturing Date', '0x22', '0xF18B', '0x62', '', 'physical')
2025-06-24 13:49:58,655 [INFO] [ECU Info] Processing ECU_INFO_4
2025-06-24 13:49:58,656 [DEBUG] [ECU Info] Step=('ECU_INFO_4', 'ECU_Serial Number', '0x22', '0xF18C', '0x62', '', 'physical')
2025-06-24 13:49:58,757 [INFO] [ECU Info] Processing ECU_INFO_5
2025-06-24 13:49:58,761 [DEBUG] [ECU Info] Step=('ECU_INFO_5', 'H/W Version', '0x22', '0xF193', '0x62', '', 'physical')
2025-06-24 13:49:58,864 [DEBUG] Stopping CanStack
2025-06-24 13:49:58,866 [DEBUG] Main thread is exiting
2025-06-24 13:49:58,897 [DEBUG] CanStack Stopped
2025-06-24 13:49:58,898 [INFO] Connection closed
2025-06-24 13:49:59,140 [ERROR] [CANLogger] Error during stop: I/O operation on closed file.
###
def get_ecu_information(self, oled=None ,logging_enable=True):
     
        testcase_file_path = self.get_testcase_file_path()
        if logging_enable:
                self.start_logging(log_name_suffix="ECU_Info")
                
        ecu_info = {}
        session_default = int(self.uds_config["default_session"], 16)
        session_extended = int(self.uds_config["extended_session"], 16)
        
        
        grouped_cases = load_testcases(testcase_file_path)
        time.sleep(0.5)
        
        def normalize_hex_string(val):
            return val.lower().replace("0x", "").strip()
        
        with Client(self.active_conn["conn"], request_timeout=2, config=self.client_config) as client:
            try:
                client.change_session(session_default)
                time.sleep(0.2)
                client.change_session(session_extended)
                time.sleep(0.2)
                
            except Exception as e:
                if oled:
                    oled.display_centered_text(f"Session Error:\n{str(e)}")
                logging.error(f"Session change failed: {e}")
                
                return
        
            
            for tc_id, steps in grouped_cases.items():
                if not tc_id.startswith("ECU_INFO"):
                    continue
        
                logging.info(f"[ECU Info] Processing {tc_id}")
        
                for step in steps:
                    logging.debug(f"[ECU Info] Step={step}")
        
                    try:
                        tc_id, step_desc, service, subfunc, expected, *rest = step
        
                        service_clean = normalize_hex_string(service)
                        subfunc_clean = normalize_hex_string(subfunc)
        
                        
                        try:
                            did = int(subfunc_clean, 16)
                        except ValueError as ve:
                            logging.error(f"[ECU Info] Invalid subfunc '{subfunc}' in {tc_id} step '{step_desc}': {ve}")
                            continue
        
                          # RAW request:
                            did_hi = (did >> 8) & 0xFF
                            did_lo = did & 0xFF
                           
                            raw_request = bytes([0x22, did_hi, did_lo])
                            logging.info(f"[ECU Info] Sending raw request: {raw_request.hex()}")
                           
                            client.conn.send(raw_request)
                            response = client.conn.wait_frame(timeout=2)
                           
                            raw_payload = list(response)
                            logging.debug(f"[ECU Info] Received raw payload: {raw_payload}")
                           
                            if raw_payload[0] != 0x62:
                                raise Exception(f"Unexpected response: {raw_payload}")
                           
                            if raw_payload[1] != did_hi or raw_payload[2] != did_lo:
                                raise Exception(f"DID mismatch: {raw_payload}")
                           
                            raw_data = raw_payload[3:]
                            hex_str = ' '.join(f"{b:02X}" for b in raw_data)
                           
                            ecu_info[step_desc] = hex_str
        
                            if oled:
                                oled.display_centered_text(f"{step_desc}\n{hex_str}")
                                time.sleep(2)
        
                            logging.info(f"[ECU Info] {step_desc} ({subfunc}) = {hex_str}")
        
                        
        
                    except Exception as e:
                        error_msg = str(e)[:40]
                        ecu_info[step_desc] = f"Error: {error_msg}"
        
                        if oled:
                            oled.display_centered_text(f"{step_desc}\nError: {error_msg}")
        
                        logging.error(f"[ECU Info] {step_desc} - Exception: {e}")
        
                    time.sleep(0.1)
        
        
        
        if logging_enable:
                self.stop_logging()
        return ecu_info 
        
     ##
     #TC_ID/PC_ID , Testcase Description,Service ID,Sub service ID,Expected response ,Write Data,Addressing
ECU_INFO_1 , S/W Version  , 0x22 , 0xF1DD , 0x62 ,  ,physical
ECU_INFO_2 , B-CAN Version , 0x22 , 0xF100 , 0x62 , , physical
ECU_INFO_3 , Manufacturing Date, 0x22 , 0xF18B , 0x62 ,  ,physical
ECU_INFO_4 , ECU_Serial Number , 0x22 , 0xF18C , 0x62 ,  ,physical
ECU_INFO_5 , H/W Version , 0x22 , 0xF193 , 0x62 ,  ,physical
TC_ID-001 , Start default session,0x10,0x01,0x50 ,  ,physical
TC_ID-003 , Start Extended session,0x10,0x03,0x50 ,  ,physical
TC_ID-004 , Sub function not supported(10 FF),0x10,0xFF,0x7F 0x10 0x12 ,  ,physical
TC_ID-007 , Hard reset,0x11,0x01,0x51 ,  ,physical   
