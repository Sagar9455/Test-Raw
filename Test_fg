def get_description(data_bytes):
    if not data_bytes or len(data_bytes) < 2:
        return "", "", ""
    sid_index = 2 if data_bytes[0].startswith("1") else 1
    if len(data_bytes) <= sid_index:
        return "", "", ""
    sid = data_bytes[sid_index].upper()

    # Attempt full (SID + Subfunction/DID) match first
    for length in (3, 2, 1):
        if sid_index + length < len(data_bytes):
            sub = ''.join(data_bytes[sid_index + 1: sid_index + 1 + length]).upper()
            key = (sid, sub)
            if key in DESCRIPTION_MAP:
                used = getattr(get_description, "used_tc_ids", set())
                for desc, tc_id, expected_resp in DESCRIPTION_MAP[key]:
                    if tc_id not in used:
                        used.add(tc_id)
                        setattr(get_description, "used_tc_ids", used)
                        return desc, tc_id, expected_resp
                return DESCRIPTION_MAP[key][0]

    # Fallback: try matching just by SID (if sub was missing in .txt)
    key_sid_only = (sid, "")
    if key_sid_only in DESCRIPTION_MAP:
        used = getattr(get_description, "used_tc_ids", set())
        for desc, tc_id, expected_resp in DESCRIPTION_MAP[key_sid_only]:
            if tc_id not in used:
                used.add(tc_id)
                setattr(get_description, "used_tc_ids", used)
                return desc, tc_id, expected_resp
        return DESCRIPTION_MAP[key_sid_only][0]

    return "", "", ""
