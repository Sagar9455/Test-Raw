elif service_int == 0x28:
    subfunc_clean = subfunc.strip()
    expected_clean = expected.strip() if expected else ""

    if subfunc_clean:
        try:
            # Convert subfunction to int
            subfunc_int = int(subfunc_clean, 16)
            comm_type = 0x00  # Default communication type
            raw_request = bytes([0x28, subfunc_int, comm_type])

            logging.info(f"{tc_id} - {step_desc}: Sending {raw_request.hex().upper()}")
            client.conn.send(raw_request)
            response_data = client.conn.wait_frame(timeout=2)

        except ValueError as e:
            logging.error(f"{tc_id} - Invalid subfunction format for 0x28: {subfunc} â†’ {e}")
            response_data = None

    else:
        # Fallback: Build raw request using expected bytes
        try:
            subfunc_bytes = bytes.fromhex(subfunc_clean) if subfunc_clean else b''
            expected_bytes = bytes.fromhex(expected_clean) if expected_clean else b''
            raw_request = bytearray([service_int]) + subfunc_bytes + expected_bytes

            logging.info(f"{tc_id} - {step_desc}: Sending {raw_request.hex().upper()}")
            client.conn.send(raw_request)
            response_data = client.conn.wait_frame(timeout=2)

        except ValueError as e:
            logging.error(f"{tc_id} - Invalid hex input for raw fallback in 0x28: {e}")
            response_data = None
